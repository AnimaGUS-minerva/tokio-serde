var N=null,E="",T="t",U="u",searchIndex={};
var R=["result","get_ref","get_mut","into_inner","option","try_from","try_into","borrow_mut","borrow","type_id","try_poll_next","context","poll_ready","start_send","poll_flush","poll_close","poll_next","Serializer","Deserializer","FramedRead","FramedWrite"];

searchIndex["tokio_serde"]={"doc":"This crate provides the utilities needed to easily…","i":[[3,R[19],"tokio_serde","Adapts a stream of buffers to a stream of values by…",N,N],[3,R[20],E,"Adapts a buffer sink to a value sink by serializing the…",N,N],[8,R[17],E,"Serializes a value into a destination buffer",N,N],[16,"Error",E,E,0,N],[10,"serialize",E,"Serializes `item` into a new buffer",0,[[["pin"],["self"],[T]],[[R[0],["bytes"]],["bytes"]]]],[8,R[18],E,"Deserializes a value from a source buffer",N,N],[16,"Error",E,E,1,N],[10,"deserialize",E,"Deserializes a value from `buf`",1,[[["pin"],["self"],["bytesmut"]],[R[0]]]],[11,"new",E,"Creates a new `FramedRead` with the given buffer stream…",2,[[["s"],[T]],["framedread"]]],[11,R[1],E,"Returns a reference to the underlying stream wrapped by…",2,[[["self"]],[T]]],[11,R[2],E,"Returns a mutable reference to the underlying stream…",2,[[["self"]],[T]]],[11,R[3],E,"Consumes the `FramedRead`, returning its underlying stream.",2,[[],[T]]],[11,"new",E,"Creates a new `FramedWrite` with the given buffer sink and…",3,[[["s"],[T]],["self"]]],[11,R[1],E,"Returns a reference to the underlying sink wrapped by…",3,[[["self"]],[T]]],[11,R[2],E,"Returns a mutable reference to the underlying sink wrapped…",3,[[["self"]],[T]]],[11,R[3],E,"Consumes the `FramedWrite`, returning its underlying sink.",3,[[],[T]]],[11,"into",E,E,2,[[],[U]]],[11,"from",E,E,2,[[[T]],[T]]],[11,R[5],E,E,2,[[[U]],[R[0]]]],[11,R[6],E,E,2,[[],[R[0]]]],[11,R[7],E,E,2,[[["self"]],[T]]],[11,R[8],E,E,2,[[["self"]],[T]]],[11,R[9],E,E,2,[[["self"]],["typeid"]]],[11,R[10],E,E,2,[[["pin"],["s"],[R[11]]],[[R[4],[R[0]]],["poll",[R[4]]]]]],[11,"into",E,E,3,[[],[U]]],[11,"from",E,E,3,[[[T]],[T]]],[11,R[5],E,E,3,[[[U]],[R[0]]]],[11,R[6],E,E,3,[[],[R[0]]]],[11,R[7],E,E,3,[[["self"]],[T]]],[11,R[8],E,E,3,[[["self"]],[T]]],[11,R[9],E,E,3,[[["self"]],["typeid"]]],[11,R[10],E,E,3,[[["pin"],["s"],[R[11]]],[[R[4],[R[0]]],["poll",[R[4]]]]]],[11,R[12],E,E,2,[[["pin"],["self"],[R[11]]],[[R[0]],["poll",[R[0]]]]]],[11,R[13],E,E,2,[[["pin"],["self"],["sinkitem"]],[R[0]]]],[11,R[14],E,E,2,[[["pin"],["self"],[R[11]]],[[R[0]],["poll",[R[0]]]]]],[11,R[15],E,E,2,[[["pin"],["self"],[R[11]]],[[R[0]],["poll",[R[0]]]]]],[11,R[12],E,E,3,[[["pin"],["self"],[R[11]]],[[R[0]],["poll",[R[0]]]]]],[11,R[13],E,E,3,[[["pin"],["self"],[U]],[R[0]]]],[11,R[14],E,E,3,[[["pin"],["self"],[R[11]]],[[R[0]],["poll",[R[0]]]]]],[11,R[15],E,E,3,[[["pin"],["self"],[R[11]]],[[R[0]],["poll",[R[0]]]]]],[11,R[16],E,E,2,[[["pin"],["self"],[R[11]]],[[R[4]],["poll",[R[4]]]]]],[11,R[16],E,E,3,[[["pin"],["self"],[R[11]]],[[R[4]],["poll",[R[4]]]]]]],"p":[[8,R[17]],[8,R[18]],[3,R[19]],[3,R[20]]]};
initSearch(searchIndex);addSearchOptions(searchIndex);